import argparse
import asyncio
import sys

from seed import main as seed_main
from src.database.db import session_manager
from src.database.repository import (
    create_student,
    create_group,
    create_subject,
    create_teacher,
    create_rating,
    select_1,
    select_2,
    select_3,
    select_4,
    select_5,
    select_6,
    select_7,
    select_8,
    select_9,
    select_10,
)


# ---------- DECORATORS ----------
_COMMAND_HANDLERS = {}
_SELECT_FORMATTERS = {}


def command(name):
    def decorator(func):
        _COMMAND_HANDLERS[name] = func
        return func
    return decorator


def formatter(name):
    def decorator(func):
        _SELECT_FORMATTERS[name] = func
        return func
    return decorator


# ---------- HANDLERS ----------
@command("create")
async def handle_create(args):
    async with session_manager() as session:
        if args.model == "Student":
            await create_student(args.name, args.last_name, args.group_id, session)
            print(f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç '{args.name} {args.last_name}' —Å—Ç–≤–æ—Ä–µ–Ω–∏–π.")
        elif args.model == "Group":
            await create_group(args.name, session)
            print(f"‚úÖ –ì—Ä—É–ø–∞ '{args.name}' —Å—Ç–≤–æ—Ä–µ–Ω–∞.")
        elif args.model == "Teacher":
            await create_teacher(args.name, session)
            print(f"‚úÖ –í–∏–∫–ª–∞–¥–∞—á '{args.name}' —Å—Ç–≤–æ—Ä–µ–Ω–∏–π.")
        elif args.model == "Subject":
            await create_subject(args.name, args.teacher_id, session)
            print(f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{args.name}' —Å—Ç–≤–æ—Ä–µ–Ω–∏–π.")
        elif args.model == "Rating":
            await create_rating(args.student_id, args.subject_id, args.rating, session)
            print(f"‚úÖ –û—Ü—ñ–Ω–∫–∞ '{args.rating}' –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {args.student_id} –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {args.subject_id} —Å—Ç–≤–æ—Ä–µ–Ω–∞.")
        else:
            print("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –º–æ–¥–µ–ª—å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è.")


@command("seed")
async def handle_seed(args):
    await seed_main()
    print("üå± –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞.")


async def handle_select(repo_func, args):
    """
    –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤ SELECT.
    –¶–µ —É—Å—É–≤–∞—î –¥—É–±–ª—é–≤–∞–Ω–Ω—è –∫–æ–¥—É –≤ –æ–∫—Ä–µ–º–∏—Ö —Ñ—É–Ω–∫—Ü—ñ—è—Ö handle_select_N.
    """
    async with session_manager() as session:
        # –ü–µ—Ä–µ–¥–∞—î–º–æ –ª–∏—à–µ —Ç—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
        call_kwargs = {k: v for k, v in vars(args).items() if k not in ['func', 'action', 'repo_func']}
        result = await repo_func(session, **call_kwargs)
        
        formatter_func = _SELECT_FORMATTERS.get(args.action)
        if formatter_func:
            formatter_func(result, args)
        else:
            print("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è –≤–∏–±—ñ—Ä–∫–∏.")


# ---------- SELECT FORMATTERS ----------
@formatter("select_1")
def format_select_1(result, args):
    print("\nüìä –¢–æ–ø-5 —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑ –Ω–∞–π–±—ñ–ª—å—à–∏–º —Å–µ—Ä–µ–¥–Ω—ñ–º –±–∞–ª–æ–º:")
    for student_name, avg_rating in result:
        print(f" ¬† {student_name}: {avg_rating:.2f}")


@formatter("select_2")
def format_select_2(result, args):
    if result:
        print(f"\nüèÜ –ö—Ä–∞—â–∏–π —Å—Ç—É–¥–µ–Ω—Ç –∑ –ø—Ä–µ–¥–º–µ—Ç–∞ '{args.subject_name}': {result.student_name}, —Å–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª: {result.avg_rating:.2f}")
    else:
        print("‚ùå –°—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑–∞ —Ü–∏–º –ø—Ä–µ–¥–º–µ—Ç–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")


@formatter("select_3")
def format_select_3(result, args):
    if result:
        print(f"\nüìö –°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª –ø–æ –≥—Ä—É–ø—ñ '{args.group_name}': {result.avg_rating:.2f}")
    else:
        print("‚ùå –ì—Ä—É–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")


@formatter("select_4")
def format_select_4(result, args):
    if result:
        print(f"\nüìà –°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª –Ω–∞ –ø–æ—Ç–æ—Ü—ñ: {result.avg_rating:.2f}")
    else:
        print("‚ùå –î–∞–Ω–∏—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")


@formatter("select_5")
def format_select_5(result, args):
    print(f"\nüìò –ö—É—Ä—Å–∏, —è–∫—ñ —á–∏—Ç–∞—î –≤–∏–∫–ª–∞–¥–∞—á '{args.teacher_name}':")
    for r in result:
        print(f" ¬† {r}")


@formatter("select_6")
def format_select_6(result, args):
    print(f"\nüë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç–∏ —É –≥—Ä—É–ø—ñ '{args.group_name}':")
    for r in result:
        print(f" ¬† {r}")


@formatter("select_7")
def format_select_7(result, args):
    print(f"\nüìù –û—Ü—ñ–Ω–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑ –≥—Ä—É–ø–∏ '{args.group_name}' –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{args.subject_name}':")
    for student_name, rating in result:
        print(f" ¬† {student_name}: {rating}")


@formatter("select_8")
def format_select_8(result, args):
    if result:
        print(f"\nüìä –°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª, —è–∫–∏–π –ø–æ—Å—Ç–∞–≤–∏–≤ –≤–∏–∫–ª–∞–¥–∞—á '{args.teacher_name}': {result.avg_rating:.2f}")
    else:
        print("‚ùå –î–∞–Ω–∏—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")


@formatter("select_9")
def format_select_9(result, args):
    print(f"\nüìò –ö—É—Ä—Å–∏, —è–∫—ñ –≤—ñ–¥–≤—ñ–¥—É—î —Å—Ç—É–¥–µ–Ω—Ç {args.student_id}:")
    for r in result:
        print(f" ¬† {r}")


@formatter("select_10")
def format_select_10(result, args):
    print(f"\nüìò –ö—É—Ä—Å–∏, —è–∫—ñ –≤–∏–∫–ª–∞–¥–∞—á '{args.teacher_name}' —á–∏—Ç–∞—î —Å—Ç—É–¥–µ–Ω—Ç—É {args.student_id}:")
    for r in result:
        print(f" ¬† {r}")


# ---------- BUILDER AND MAIN ----------
def build_parser():
    parser = argparse.ArgumentParser(description="üéì CLI App for hw_06_db")
    subparsers = parser.add_subparsers(dest="action", help="–î—ñ—è")

    # Seed command
    seed_parser = subparsers.add_parser("seed", help="–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö –≤–∏–ø–∞–¥–∫–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏")
    seed_parser.set_defaults(func=_COMMAND_HANDLERS["seed"])

    # Create command
    create_parser = subparsers.add_parser("create", help="–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É —Å—É—Ç–Ω—ñ—Å—Ç—å")
    create_parser.add_argument("-m", "--model", required=True, choices=["Student", "Teacher", "Group", "Subject", "Rating"], help="–ú–æ–¥–µ–ª—å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")
    create_parser.add_argument("--name", help="–Ü–º'—è")
    create_parser.add_argument("--last_name", help="–ü—Ä—ñ–∑–≤–∏—â–µ")
    create_parser.add_argument("--group_id", type=int, help="ID –≥—Ä—É–ø–∏")
    create_parser.add_argument("--teacher_id", type=int, help="ID –≤–∏–∫–ª–∞–¥–∞—á–∞")
    create_parser.add_argument("--student_id", type=int, help="ID —Å—Ç—É–¥–µ–Ω—Ç–∞")
    create_parser.add_argument("--subject_id", type=int, help="ID –ø—Ä–µ–¥–º–µ—Ç–∞")
    create_parser.add_argument("--rating", type=int, help="–û—Ü—ñ–Ω–∫–∞")
    create_parser.set_defaults(func=_COMMAND_HANDLERS["create"])

    # Select queries
    for i in range(1, 11):
        sp = subparsers.add_parser(f"select_{i}", help=f"–í–∏–∫–æ–Ω–∞—Ç–∏ select_{i}")
        if i == 2:
            sp.add_argument("--subject_name", required=True, help="–ù–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞")
        elif i == 3:
            sp.add_argument("--group_name", required=True, help="–ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏")
        elif i == 5:
            sp.add_argument("--teacher_name", required=True, help="–Ü–º'—è –≤–∏–∫–ª–∞–¥–∞—á–∞")
        elif i == 6:
            sp.add_argument("--group_name", required=True, help="–ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏")
        elif i == 7:
            sp.add_argument("--group_name", required=True, help="–ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏")
            sp.add_argument("--subject_name", required=True, help="–ù–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞")
        elif i == 8:
            sp.add_argument("--teacher_name", required=True, help="–Ü–º'—è –≤–∏–∫–ª–∞–¥–∞—á–∞")
        elif i == 9:
            sp.add_argument("--student_id", type=int, required=True, help="ID —Å—Ç—É–¥–µ–Ω—Ç–∞")
        elif i == 10:
            sp.add_argument("--student_id", type=int, required=True, help="ID —Å—Ç—É–¥–µ–Ω—Ç–∞")
            sp.add_argument("--teacher_name", required=True, help="–Ü–º'—è –≤–∏–∫–ª–∞–¥–∞—á–∞")

        # –¢—É—Ç –º–∏ –ø–µ—Ä–µ–¥–∞—î–º–æ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ —ñ —Ñ—É–Ω–∫—Ü—ñ—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
        sp.set_defaults(func=handle_select, repo_func=globals()[f'select_{i}'])

    return parser


async def main():
    parser = build_parser()
    if len(sys.argv) == 1:
        parser.print_help(sys.stderr)
        return

    args = parser.parse_args()
    try:
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ —ñ –ø–µ—Ä–µ–¥–∞—î–º–æ –π–æ–º—É —Ñ—É–Ω–∫—Ü—ñ—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
        if args.func:
            if 'repo_func' in args:
                await args.func(args.repo_func, args)
            else:
                await args.func(args)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {e}")


if __name__ == "__main__":
    asyncio.run(main())
