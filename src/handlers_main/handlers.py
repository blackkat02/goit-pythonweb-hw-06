from seed import main as seed_main
from src.handlers_main.decorators import command, _SELECT_FORMATTERS,  _COMMAND_HANDLERS  # formatter,
from src.handlers_main.formatters import formatter
from src.database.db import session_manager
from src.database.repository import (
    create_student,
    create_group,
    create_subject,
    create_teacher,
    create_rating,
    select_1,
    select_2,
    select_3,
    select_4,
    select_5,
    select_6,
    select_7,
    select_8,
    select_9,
    select_10,
)


@command("create")
async def handle_create(args):
    async with session_manager() as session:
        if args.model == "Student":
            await create_student(args.name, args.last_name, args.group_id, session)
            print(f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç '{args.name} {args.last_name}' —Å—Ç–≤–æ—Ä–µ–Ω–∏–π.")
        elif args.model == "Group":
            await create_group(args.name, session)
            print(f"‚úÖ –ì—Ä—É–ø–∞ '{args.name}' —Å—Ç–≤–æ—Ä–µ–Ω–∞.")
        elif args.model == "Teacher":
            await create_teacher(args.name, session)
            print(f"‚úÖ –í–∏–∫–ª–∞–¥–∞—á '{args.name}' —Å—Ç–≤–æ—Ä–µ–Ω–∏–π.")
        elif args.model == "Subject":
            await create_subject(args.name, args.teacher_id, session)
            print(f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{args.name}' —Å—Ç–≤–æ—Ä–µ–Ω–∏–π.")
        elif args.model == "Rating":
            await create_rating(args.student_id, args.subject_id, args.rating, session)
            print(
                f"‚úÖ –û—Ü—ñ–Ω–∫–∞ '{args.rating}' –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {args.student_id} –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {args.subject_id} —Å—Ç–≤–æ—Ä–µ–Ω–∞."
            )
        else:
            print("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –º–æ–¥–µ–ª—å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è.")


@command("seed")
async def handle_seed(args):
    await seed_main()
    print("üå± –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞.")


async def handle_select(repo_func, args):
    """
    –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤ SELECT.
    –¶–µ —É—Å—É–≤–∞—î –¥—É–±–ª—é–≤–∞–Ω–Ω—è –∫–æ–¥—É –≤ –æ–∫—Ä–µ–º–∏—Ö —Ñ—É–Ω–∫—Ü—ñ—è—Ö handle_select_N.
    """
    print(f"–û—Ç—Ä–∏–º–∞–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏: {vars(args)}")

    async with session_manager() as session:
        # –ü–µ—Ä–µ–¥–∞—î–º–æ –ª–∏—à–µ —Ç—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
        call_kwargs = {
            k: v
            for k, v in vars(args).items()
            if k not in ["func", "action", "repo_func"]
        }
        result = await repo_func(session=session, **call_kwargs)

        formatter_func = _SELECT_FORMATTERS.get(args.action)
        if formatter_func:
            formatter_func(result, args)
        else:
            print("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è –≤–∏–±—ñ—Ä–∫–∏.")


