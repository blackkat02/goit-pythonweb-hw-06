import argparse
# import asyncio
# import sys

# from seed import main as seed_main
from src.handlers.handlers import _COMMAND_HANDLERS, handle_select
# from src.database.db import session_manager
# from src.database.repository import (
#     create_student,
#     create_group,
#     create_subject,
#     create_teacher,
#     create_rating,
#     select_1,
#     select_2,
#     select_3,
#     select_4,
#     select_5,
#     select_6,
#     select_7,
#     select_8,
#     select_9,
#     select_10,
# )

# ---------- BUILDER AND MAIN ----------
def build_parser():
    parser = argparse.ArgumentParser(description="üéì CLI App for hw_06_db")
    subparsers = parser.add_subparsers(dest="action", help="–î—ñ—è")

    # Seed command
    seed_parser = subparsers.add_parser(
        "seed", help="–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö –≤–∏–ø–∞–¥–∫–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏"
    )
    seed_parser.set_defaults(func=_COMMAND_HANDLERS["seed"])

    # Create command
    create_parser = subparsers.add_parser("create", help="–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É —Å—É—Ç–Ω—ñ—Å—Ç—å")
    create_parser.add_argument(
        "-m",
        "--model",
        required=True,
        choices=["Student", "Teacher", "Group", "Subject", "Rating"],
        help="–ú–æ–¥–µ–ª—å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è",
    )
    create_parser.add_argument("--name", help="–Ü–º'—è")
    create_parser.add_argument("--last_name", help="–ü—Ä—ñ–∑–≤–∏—â–µ")
    create_parser.add_argument("--group_id", type=int, help="ID –≥—Ä—É–ø–∏")
    create_parser.add_argument("--teacher_id", type=int, help="ID –≤–∏–∫–ª–∞–¥–∞—á–∞")
    create_parser.add_argument("--student_id", type=int, help="ID —Å—Ç—É–¥–µ–Ω—Ç–∞")
    create_parser.add_argument("--subject_id", type=int, help="ID –ø—Ä–µ–¥–º–µ—Ç–∞")
    create_parser.add_argument("--rating", type=int, help="–û—Ü—ñ–Ω–∫–∞")
    create_parser.set_defaults(func=_COMMAND_HANDLERS["create"])

    # Select queries
    for i in range(1, 11):
        sp = subparsers.add_parser(f"select_{i}", help=f"–í–∏–∫–æ–Ω–∞—Ç–∏ select_{i}")
        if i == 2:
            sp.add_argument("--subject_name", required=True, help="–ù–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞")
        elif i == 3:
            sp.add_argument("--group_name", required=True, help="–ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏")
        elif i == 5:
            sp.add_argument("--teacher_name", required=True, help="–Ü–º'—è –≤–∏–∫–ª–∞–¥–∞—á–∞")
        elif i == 6:
            sp.add_argument("--group_name", required=True, help="–ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏")
        elif i == 7:
            sp.add_argument("--group_name", required=True, help="–ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏")
            sp.add_argument("--subject_name", required=True, help="–ù–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞")
        elif i == 8:
            sp.add_argument("--teacher_name", required=True, help="–Ü–º'—è –≤–∏–∫–ª–∞–¥–∞—á–∞")
        elif i == 9:
            sp.add_argument("--student_id", type=int, required=True, help="ID —Å—Ç—É–¥–µ–Ω—Ç–∞")
        elif i == 10:
            sp.add_argument("--student_id", type=int, required=True, help="ID —Å—Ç—É–¥–µ–Ω—Ç–∞")
            sp.add_argument("--teacher_name", required=True, help="–Ü–º'—è –≤–∏–∫–ª–∞–¥–∞—á–∞")

        # –¢—É—Ç –º–∏ –ø–µ—Ä–µ–¥–∞—î–º–æ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ —ñ —Ñ—É–Ω–∫—Ü—ñ—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
        sp.set_defaults(func=handle_select, repo_func=globals()[f"select_{i}"])

    return parser